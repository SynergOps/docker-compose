version: "3.3"
networks:
  proxy:
    name: traefik-net # dont forget to create (docker network create traefik-net) it before running the stack
    external: true
services:
  traefik:
    image: traefik:latest
    container_name: traefik
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    healthcheck:
      test: grep -qr "traefik" /proc/*/status || exit
      interval: 1m
      timeout: 30s
      retries: 3
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-data/traefik.yml:/traefik.yml:ro
      # Store cloudflare certificates in ./certificates/acmecflare.json
      # Store letsencrypt certificates in ./certificates/acmelencrypt.json  
      - ./traefik-data/certificates:/certificates # This is the way. Else you shall get stupid errors like 
      # "unable to get ACME account: permissions 755 for ./acmexxxx.json are too open, please use 600"
      - ./traefik-data/config.yml:/config.yml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.example.com`)"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.example.com`)"
      - "traefik.http.routers.traefik-secure.middlewares=user-auth@file" # user-auth is configured in config.yml
      - "traefik.http.routers.traefik-secure.tls=true"
      # This is where the magic with wild card certificate happens. After configuring your
      # DNS with a "A RECORD for *.example.com" you can use one certificate for all subdomains
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=example.com"
      - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.example.com"
      # Redirect trafik to internal api
      - "traefik.http.routers.traefik-secure.service=api@internal"

# If you need Portainer in the same docker compose uncomment the following
#  portainer:
#    image: portainer/portainer-ce:latest
#    container_name: portainer
#    restart: unless-stopped
#    security_opt:
#      - no-new-privileges:true
#    networks:
#      - proxy
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - ./portainer-data:/data
#    labels:
#      - "traefik.enable=true"
#      - "traefik.docker.network=proxy"
#      - "traefik.http.routers.portainer-secure.entrypoints=websecure"
#      - "traefik.http.routers.portainer-secure.rule=Host(`portainer.example.com`)"
#      - "traefik.http.routers.portainer-secure.service=portainer"
#      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
